/*
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and
 * limitations under the License.
 *
 * The Original Code is Navajo Verb Morphology Parser code.
 *
 * The Initial Developer of the Original Code is
 * Eden Siu-yue Li.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 */

%%%%%%%%%%%%
% do_debug.P
%  Command-line driver.
%%%%%%%%%%%%

:- import p_verb/2 from rules.
:- import getUnderlying/2, getParses/2 from run.
:- import length/2 from listutil.

:- read(X), read(Y), parseDebug(X,Y).

parseDebug(Input,ShouldBe) :-
    getUnderlying(Input,Underlying) ->
      (getParses(Underlying,Parses),
       printLength(Parses),
       parsesShouldBe(Parses,ShouldBe)) ;
      writeln('No parses').

printLength(Parses) :-
    (nonvar(Parses), length(Parses,N),
    (N > 1 ->
        write('<p style="color:red;font-size:large">'),
        write('There were '), write(N), write(' unique parses.</p>'))) ; true.

parsesShouldBe([],_) :- write('<p style="color:red;font-size:large">Parse failed</p>').
parsesShouldBe([[_,X]|R],ShouldBe) :-
    parseShouldBe(X,ShouldBe) ->
        write('<p>Parse passed</p>') ;
        parsesShouldBe(R,ShouldBe).

parseShouldBe(
    template(Disj,Conj,Subj,_,Stem),
    [Subject,Mode,DistPl])
:-
    write(template(Disj,Conj,Subj,Stem)),writeln('<br>'),
    Disj =.. [disjunct,_,distpl(DPl)|_],
    Conj =.. [conjunct,_,P4|_],
    Subj =.. [subject,Sub|_],
    Stem =.. [stem,_,mode(M)|_],
    (var(DPl) -> DPl = [] ; true),
    validParse(M,Sub,DPl,P4,Mode,Subject,DistPl),!.

validParse(Mode,_,DPl,subj4p,Mode,four,DPl) :- !.
validParse(Mode,Subject,DPl,_,Mode,Subject,DPl).

